{
  "Add lint rule": {
    "prefix": "lint_rule",
    "body": [
      "import 'package:analyzer/error/error.dart';",
      "import 'package:analyzer/error/listener.dart';",
      "import 'package:custom_lint_builder/custom_lint_builder.dart';",
      "",
      "class ${1:${TM_FILENAME_BASE/((^[a-z])|_([a-z]))/${2:/upcase}${3:/upcase}/g}} extends DartLintRule {",
      "  const ${1:LintRule}() : super(code: _code);",
      "",
      "  static const _code = LintCode(",
      "    name: '${TM_FILENAME_BASE}',",
      "    problemMessage: '${2:The problem message.}',",
      "    correctionMessage: '${3:How to fix the problem?}',",
      "  );",
      "",
      "  @override",
      "  List<Fix> getFixes() => [_${1:LintRule}Fix()];",
      "",
      "  @override",
      "  void run(",
      "    CustomLintResolver resolver,",
      "    ErrorReporter reporter,",
      "    CustomLintContext context,",
      "  ) {",
      "    ${4}",
      "  }",
      "}",
      "",
      "class _${1:LintRule}Fix extends DartFix {",
      "  @override",
      "  void run(",
      "    CustomLintResolver resolver,",
      "    ChangeReporter reporter,",
      "    CustomLintContext context,",
      "    AnalysisError analysisError,",
      "    List<AnalysisError> others,",
      "  ) {",
      "    ${5}",
      "  }",
      "}"
    ],
    "description": "Inserts custom lint rule with fix."
  },
  "Add assist": {
    "prefix": "assist",
    "body": [
      "import 'package:analyzer/source/source_range.dart';",
      "import 'package:custom_lint_builder/custom_lint_builder.dart';",
      "",
      "class ${1:${TM_FILENAME_BASE/((^[a-z])|_([a-z]))/${2:/upcase}${3:/upcase}/g}} extends DartAssist {",
      "  @override",
      "  void run(",
      "    CustomLintResolver resolver,",
      "    ChangeReporter reporter,",
      "    CustomLintContext context,",
      "    SourceRange target,",
      "  ) {",
      "    context.registry.${3:addXYZ}((node) {",
      "      // Check that the visited node is under the cursor",
      "      if (!target.intersects(node.sourceRange)) {",
      "        return;",
      "      }",
      "",
      "      reporter",
      "          .createChangeBuilder(",
      "            message: '${2:A meaningful statement of what the assist does}',",
      "            priority: 100,",
      "          )",
      "          .addDartFileEdit(",
      "            (builder) => builder",
      "              ..${4:addYourChange}()",
      "              ..format(node.sourceRange),",
      "          );",
      "      ",
      "    });",
      "  }",
      "}"
    ],
    "description": "Inserts custom lint assist."
  }
}
